# -*- coding: utf-8 -*-
"""
Editor de Spyder

Este es un archivo temporal
"""
#VERSIÓN OPTIMIZADA 06/11/18

##############################################################################
### Librerías necesarias para este script ###
##############################################################################

import pandas as pd                      # Leer archivo CSV
import numpy as np                       # Análisis númerico
import matplotlib.pyplot as plt          # Graficador

from matplotlib import pyplot
from pandas.plotting import lag_plot
from pandas.plotting import autocorrelation_plot
from statsmodels.graphics.tsaplots import plot_acf

import seaborn as sns
#%matplotlib inline
sns.set()

df = pd.read_csv('conjunto.csv', skiprows=0)
df.head()
df.info()

df.set_index('Date', inplace=True)
df.head()
df.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

credito = df[['credito']]
credito.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

df_rm = pd.concat([credito, credito.shift(1)], axis=1)
df_rm.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

icap = df[['icap']]
icap.rolling(12).mean().plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

df_rm = pd.concat([icap.rolling(12).mean(), icap], axis=1)
df_rm.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

df_dif = pd.concat([icap.diff(), icap], axis=1)
df_dif.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

df_cred = pd.read_csv('conjunto.csv', parse_dates=['Date'])
df_cred.head()
cred = pd.DataFrame(data= df_cred)
cred.head()

cred['Return'] = np.log(cred['icap']/cred['icap'].shift(1))
Return=cred['Return']

lag_plot(cred['Return'])

Return.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);

df_diference = pd.concat([Return.shift(1), Return], axis=1)
df_diference.columns = ['t-1','t+1']
resultado = df_diference.corr()
print(resultado)
df_diference.plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);


autocorrelation_plot(Return)

plot_acf(Return, lags=31)

iris = pd.read_csv('conjunto.csv', parse_dates=['Date'])
iris.head()
df_iris = pd.DataFrame(data= iris)
df_iris.head()

df_iris.corr()

sns.lmplot(x='icap', y='basemon', fit_reg=False, data=df_iris);
sns.lmplot(x='icap', y='basemon', fit_reg=False, data=df_iris,hue='igae');

df.diff().plot(figsize=(10,3), linewidth=3, fontsize=12)
plt.xlabel('Year', fontsize=12);


autocorrelation_plot(icap);

##################
# Filtros Kalman #
##################


# Preparacion de datos que se obtienen de la serie de tiempo

mu = np.mean(cred['Return'])     # media de dcredito_adj
sd = np.std(cred['Return'])      # desviacion estanar de dcreduito_adj
sigma = np.var(cred['Return'])   # varianza de dcreditoc_adj
size = len(cred['Return'])       # tamano del vector de dcredito_adj
x = cred['Return'][0]            # primer valor del vector
z_credito = np.random.normal(mu, sd, size)
print(mu)
print(sd)
print(sigma)
print(size)

####SIGUE CORRIENDO CON EL MISMO ERROR Y  NO MUESTRA GRAFICOS DIFERENTES###


# Preparacion de datos a estimar

xhat = np.zeros(size)      # estimacion de x a posteri 
P = np.zeros(size)         # estimacion de e a posteri 
xhatminus = np.zeros(size) # estimacion de x a priori 
Pminus = np.zeros(size)    # estimacion de e a priori 
K = np.zeros(size)         # ganancia Kalman o blending factor
xreal = np.zeros(size)     # un valor real de x
z_est = np.zeros(size)     # una observacion de x


Q = sigma                  # varianza de la serie de tiempo

R = 0.1**2                 # estimacion de la varianza


# Estimaciones iniciales
xhat[0] = 0.0              # valor inicial del vector xhat
P[0] = 0.176484                # valor inicial del vector P
xreal[0]=x                 # valor inicial del vector xreal
a=1.1                      # se asigna un valor inicial a


###CORRE PERO NO CREO QUE GRAFIQUE LO QUE QUIERO###


# Filtro Kalman Clasico
for k in range(1,size):
    # time update
    xhatminus[k] = xhat[k-1]
    Pminus[k] = P[k-1]+Q

    # measurement update
    K[k] = Pminus[k]/( Pminus[k]+R )
    xhat[k] = xhatminus[k]+K[k]*(z_credito[k]-xhatminus[k])
    P[k] = (1-K[k])*Pminus[k]


# Grafico de Estimaciones Iniciales
plt.figure()
plt.plot(z_credito,'k*',label='estimacion ruido')
plt.plot(xhat,'b-',label='estimacion a posteri')
plt.axhline(x,color='g',label='valor inicial')
plt.legend()
plt.title('Estimacion vs. iteracion', fontweight='bold')
plt.xlabel('Iteracion')
plt.ylabel('Sigma')

###CORRE CON EL MISMO ERROR Y GENERA EL MISMO GRAFICO###

# Grafico de Estimaciones sobre la medida
plt.figure()
valid_iter = range(1,size) # Pminus not valid at step 0
plt.plot(valid_iter,Pminus[valid_iter],label='a priori error estimate')
plt.title('Estimated $\it{\mathbf{a \ priori}}$ error vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('$(sigma)^2$')
plt.setp(plt.gca(),'ylim',[0,.01])
plt.show()


# Filtro Kalman Vadim
Pmax = max(P)

xhat[0] = 0.0
P[0] = 0.176484
xreal[0]=x
a=1.1

for k in range(1,size):
    # Real system
    xreal[k] = a*xreal[k-1]
    z_est[k] = xreal[k]+z_credito[k]
    
    # time update
    xhatminus[k] = a*xhat[k-1]
    Pminus[k] = a**2*P[k-1]+Q

    # measurement update
    K[k] = Pminus[k]/( Pminus[k]+R )
    xhat[k] = xhatminus[k]+K[k]*(z_credito[k]-xhatminus[k])
    P[k]=Pmax

plt.plot(z_credito,'k*',label='noisy measurements')
plt.plot(xhat,'b-',label='a posteri estimate')
#plt.plot(xreal,'g-',label='real system')
plt.legend()
plt.title('Estimate vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('sigma')







